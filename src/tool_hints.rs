//! # AI Tooling Hints
//!
//! This module provides pure helper functions for generating standardized, context-aware
//! hints for an AI agent. These hints are designed to guide the agent towards more
//! efficient and effective use of the asynchronous tools provided by the server.
//!
//! ## Core Functionality
//!
//! - **`preview()`**: This is the primary function of the module. It takes an `operation_id`
//!   and an `operation_type` (e.g., "build", "test") and uses them to populate the
//!   `TOOL_HINT_TEMPLATE` from the `constants` module.
//!
//! ## Design Philosophy
//!
//! - **Pure Functions**: The functions in this module are deliberately "pure" â€” they have
//!   no side effects, do not depend on any external state, and do not require an `async`
//!   runtime. This makes them extremely easy to test and allows them to be used in any
//!   context, including synchronous test environments.
//!
//! - **Centralized Templates**: By relying on templates defined in the `constants` module,
//!   this module ensures that all AI-facing guidance is consistent. If the wording of a
//!   hint needs to be updated, it only needs to be changed in one place (`constants.rs`),
//!   and the change will be reflected everywhere the hint is used.
//!
//! ## Purpose in the System
//!
//! The hints generated by this module are a key part of the "AI-centric" design of the
//! `ahma_mcp` server. When the server initiates a long-running asynchronous operation,
//! it can use this module to generate a detailed message to send back to the agent. This
//! message doesn't just inform the agent that the task has started; it actively guides
//! the agent on best practices, such as performing other tasks while waiting, using
//! non-blocking status checks, and batching multiple operations together before waiting.
//! This proactive guidance helps the agent to leverage the server's concurrency features
//! effectively.

/// Public helper to preview the standardized tool hint content.
/// This is a pure function (no async runtime needed) so tests can call it in #[test] contexts.
pub fn preview(operation_id: &str, operation_type: &str) -> String {
    use crate::constants::TOOL_HINT_TEMPLATE;
    TOOL_HINT_TEMPLATE
        .replace("{operation_type}", operation_type)
        .replace("{operation_id}", operation_id)
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::utils::logging::init_test_logging;

    #[test]
    fn preview_replaces_placeholders() {
        init_test_logging();
        let out = preview("abc123", "build");
        assert!(out.contains("abc123"));
        assert!(out.contains("build"));
        assert!(!out.contains("{operation_id}"));
        assert!(!out.contains("{operation_type}"));
    }
}
