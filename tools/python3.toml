# Python3 Tool Configuration for Ahma MCP
name = "python3"
description = "Python interpreter for running Python scripts and modules"
command = "python3"
enabled = true
timeout_seconds = 300

# AI guidance hints
[hints]
default = "Python interpreter ready - consider script execution, module running, or interactive exploration."
script = "Running Python script - monitor output for errors, consider debugging steps, or plan code improvements."
module = "Executing Python module - review module functionality or plan integration steps."
interactive = "Python interactive mode - use for testing code snippets, exploring APIs, or debugging."

# JSON Schema for the tool input parameters
[input_schema]
type = "object"
properties = {}

# Execute Python script from file
[[subcommand]]
name = "script"
description = "Execute a Python script file"
synchronous = false

[[subcommand.options]]
name = "file"
type = "string" 
description = "Path to Python script file to execute"
required = true

[[subcommand.options]]
name = "args"
type = "array"
description = "Arguments to pass to the script"

[[subcommand.options]]
name = "unbuffered"
type = "boolean"
description = "Force stdout and stderr streams to be unbuffered (-u)"

[[subcommand.options]]
name = "verbose"
type = "boolean"
description = "Verbose output - trace import statements (-v)"

[[subcommand.options]]
name = "optimize"
type = "string"
description = "Optimization level: 'O' (remove asserts), 'OO' (remove asserts and docstrings)"

[[subcommand.options]]
name = "warnings"
type = "string"
description = "Warning control in format action:message:category:module:lineno (-W)"

# Execute Python code from string
[[subcommand]]
name = "code"
synchronous = true
description = "Execute Python code passed as string"

[[subcommand.options]]
name = "command"
type = "string"
description = "Python code to execute"
required = true

[[subcommand.options]]
name = "unbuffered"
type = "boolean"
description = "Force stdout and stderr streams to be unbuffered (-u)"

[[subcommand.options]]
name = "verbose"
type = "boolean"
description = "Verbose output - trace import statements (-v)"

[[subcommand.options]]
name = "optimize"
type = "string"
description = "Optimization level: 'O' (remove asserts), 'OO' (remove asserts and docstrings)"

[[subcommand.options]]
name = "warnings"
type = "string"
description = "Warning control in format action:message:category:module:lineno (-W)"

# Run Python module
[[subcommand]]
name = "module"
description = "Run library module as a script"
synchronous = false

[[subcommand.options]]
name = "module_name"
type = "string"
description = "Name of the module to run (e.g., 'json.tool', 'http.server')"
required = true

[[subcommand.options]]
name = "args"
type = "array"
description = "Arguments to pass to the module"

[[subcommand.options]]
name = "unbuffered"
type = "boolean"
description = "Force stdout and stderr streams to be unbuffered (-u)"

[[subcommand.options]]
name = "verbose"
type = "boolean"
description = "Verbose output - trace import statements (-v)"

[[subcommand.options]]
name = "optimize"
type = "string"
description = "Optimization level: 'O' (remove asserts), 'OO' (remove asserts and docstrings)"

[[subcommand.options]]
name = "warnings"
type = "string"
description = "Warning control in format action:message:category:module:lineno (-W)"

# Get Python version
[[subcommand]]
name = "version"
description = "Print Python version and exit"
synchronous = true

[[subcommand.options]]
name = "detailed"
type = "boolean"
description = "Print detailed build information (-VV)"

# Get help information
[[subcommand]]
name = "help"
description = "Print help information"
synchronous = true

[[subcommand.options]]
name = "help_type"
type = "string"
description = "Type of help: 'general' (default), 'env' (environment variables), 'xoptions' (implementation options), 'all' (complete help)"

# Interactive Python shell
[[subcommand]]
name = "interactive"
description = "Start interactive Python interpreter"
synchronous = false

[[subcommand.options]]
name = "inspect"
type = "boolean"
description = "Inspect interactively after running script (-i)"

[[subcommand.options]]
name = "quiet"
type = "boolean"
description = "Don't print version and copyright messages on startup (-q)"

[[subcommand.options]]
name = "isolated"
type = "boolean"
description = "Isolate Python from user's environment (-I)"

[[subcommand.options]]
name = "no_site"
type = "boolean"
description = "Don't imply 'import site' on initialization (-S)"

[[subcommand.options]]
name = "unbuffered"
type = "boolean"
description = "Force stdout and stderr streams to be unbuffered (-u)"

[[subcommand.options]]
name = "verbose"
type = "boolean"
description = "Verbose output - trace import statements (-v)"

[[subcommand.options]]
name = "warnings"
type = "string"
description = "Warning control in format action:message:category:module:lineno (-W)"

# Check Python syntax without execution
[[subcommand]]
name = "check"
description = "Check Python script syntax without executing"
synchronous = true

[[subcommand.options]]
name = "file"
type = "string"
description = "Path to Python script file to check"
required = true

[[subcommand.options]]
name = "verbose"
type = "boolean"
description = "Verbose output - trace import statements (-v)"
